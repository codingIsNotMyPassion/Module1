2) Write a blog on Difference between HTTP1.1 vs HTTP2
HTTP1.1:    
    It supports connection reuse i.e. 
    for every TCP connection there could be multiple requests 
    and responses, and pipelining where the client can request 
    several resources from the server at once. However, 
    pipelining was hard to implement due to issues such as 
    head-of-line blocking and was not a feasible solution.

    Introduces a warning header field to carry additional information about the status of a message. Can define 24 status codes, error reporting is quicker and more efficient.

    It is relatively secure since it uses digest authentication, NTLM authentication.

HTTP2:

    1. Uses multiplexing, where over a single TCP connection resources to be delivered are interleaved and arrive at the client almost at the same time. It is done using streams which can be prioritized, can have dependencies and individual flow control. It also provides a feature called server push that allows the server to send data that the client will need but has not yet requested.

    2. Underlying semantics of HTTP such as headers, status codes remains the same.

    3. Security concerns from previous versions will continue to be seen in HTTP/2. However, it is better equipped to deal with them due to new TLS features like connection error of type Inadequate_Security.

    4. HTTP/2 does not change much in terms of caching. With the server push feature if the client finds the resources are already present in the cache, it can cancel the pushed stream.

    5. HTTP/2 utilizes multiplexing and server push to effectively reduce the page load time by a greater margin along with being less sensitive to network delays.

    6. Expands on the caching support by using additional headers like cache-control, conditional headers like If-Match and by using entity tags.

3) Write a blog about objects and its internal representation in Javascript
ANSWER:
    JavaScript object has properties associated with it. A property of an object can be explained as a variable that is attached to the object with respective values i.e in the form of “key: value” pairs

    let refrigerator = {
        name: 'whirlpool', 
        maker:'whirlpool', 
        rating:'3'
        };

object properties can be accessed using dot method or bracket method. for example refrigerator.name or refrigerator["name"] gives "whirlpool" as output

we can build object with constructors

    function Vehicle(name, maker) {
    this.name = name;
    this.maker = maker;
    }
    let car1 = new Vehicle(’Fiesta’, 'Ford’);
    let car2 = new Vehicle(’Santa Fe’, 'Hyundai’)
    console.log(car1.name);    //Output: Fiesta
    console.log(car2.name);    //Output: Santa Fe

we can create objects using "new"

    var person = new Object();
    person.firstName = “John”;
    person.lastName = “Doe”;
    person.age = 50;
    person.eyeColor = “blue”;

objects can be created using object.create()

    const person = {
    isHuman: false,
    printIntroduction: function() {
        console.log(`My name is ${this.name}. Am I human? ${this.isHuman}`);
    }
    };

    const me = Object.create(person);

    me.name = 'Matthew'; // "name" is a property set on "me", but not on "person"
    me.isHuman = true; // inherited properties can be overwritten

    me.printIntroduction();
    // expected output: "My name is Matthew. Am I human? true"